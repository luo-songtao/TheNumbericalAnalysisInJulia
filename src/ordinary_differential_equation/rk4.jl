"""
# 4阶 Runge Kutta方法(RK4)
    rk4(df, a, b, y_0, n)
![](../img/rk4.png)

可以使用同中点方法一样的方式证明出上面的公式是一个4阶的公式。另外这种方法由于本身比较简单且容易编程实现，因此比较流行。
并且它是一个单步方法，所以开始只需要一个初始条件，但是它作为一个4阶方法，精度要比欧拉方法和梯形方法要高很多。

# Example

```jldoctest
julia> test_method(rk4)    # 分别表示：步数 步长 误差
10×3 Array{Float64,2}:
    5.0  0.2          2.37881e-5 
   10.0  0.1          1.46547e-6 
   20.0  0.05         9.03543e-8 
   40.0  0.025        5.59829e-9 
   80.0  0.0125       3.48198e-10
  160.0  0.00625      2.17069e-11
  320.0  0.003125     1.35469e-12
  640.0  0.0015625    8.50431e-14
 1280.0  0.00078125   5.10703e-15
 2560.0  0.000390625  5.55112e-15
```
"""
function rk4(df, a, b, y_0, n)
    ω_i = y_0
    h = (b-a)/n
    for t_i in a:h:b-h    # t_i 更新后得出的是t_i+1的值，所以如果返回的是t_i处的近似值，那么应该将b-h
        s1 = df(t_i, ω_i)
        s2 = df(t_i+h/2, ω_i+h/2 * s1)
        s3 = df(t_i+h/2, ω_i+h/2 * s2)
        s4 = df(t_i+h, ω_i+ h*s3)
        ω_i = ω_i + h/6 * (s1 + 2*s2 + 2*s3 + s4)
    end
    return ω_i
end

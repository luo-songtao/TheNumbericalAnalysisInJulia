"""
# Runge Kutta的中点方法
    rk_midpoint(df, a, b, y_0, n)
我们已知欧拉方法是一阶方法，梯形方法是二阶方法。除了梯形方法外，还有其他的Runge Kutta类型的二阶方法，如这里的中点方法

![](../img/rk_midpoint.png)

由以上推导可知，中点方法是二阶方法

下式是右侧的每个函数求值被称为方法的阶段(stage)。梯形方法和中点方法都是二阶段的二阶Runge Kutta方法家族中的成员。
当``\\alpha=1``对应显示梯形方法，当``\\alpha=1/2``对应中点方法

![](../img/rk_midpoint2.png)

梯形方法和中点方法：
- 梯形方法是在区间的右端使用一步欧拉方法求值，估计右端的斜率，然后与左端的斜率求平均
- 中点方法是使用一步欧拉方法移动到区间中点，计算出中点的斜率，然后使用它来作为更新点

它们使用了不同方法来求解相同的问题：获取一个比欧拉方法更好的斜率表示整个区间，而欧拉方法仅仅在区间左端进行一次斜率估计

# Example

```jldoctest
julia> test_method(rk_midpoint)    # 分别表示：步数 步长 误差
10×3 Array{Float64,2}:
    5.0  0.2          0.0227446  
   10.0  0.1          0.00614341 
   20.0  0.05         0.00159519 
   40.0  0.025        0.000406308
   80.0  0.0125       0.00010252 
  160.0  0.00625      2.57482e-5 
  320.0  0.003125     6.45182e-6 
  640.0  0.0015625    1.6148e-6  
 1280.0  0.00078125   4.03932e-7 
 2560.0  0.000390625  1.01012e-7 
```
"""
function rk_midpoint(df, a, b, y_0, n)
    ω_i = y_0
    h = (b-a)/n
    for t_i in a:h:b-h    # t_i 更新后得出的是t_i+1的值，所以如果返回的是t_i处的近似值，那么应该将b-h
        ω_i = ω_i + h*(df(t_i+h/2, ω_i + h/2 * df(t_i, ω_i)))
    end
    return ω_i
end

